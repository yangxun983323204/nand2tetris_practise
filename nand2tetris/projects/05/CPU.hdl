// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // A寄存器
    // A寄存器有两种赋值来源：A指令和C指令
    Mux16(a=inM,b=outMLoop,sel=instruction[15],out=inA);
    // A寄存器写入：1、A指令 2、C指令指明了写入A寄存器
    Or(a=instruction[15],b=instruction[5],out=loadA);
    Register(in=inA,load=loadA,out=outA);

    // D寄存器
    // D寄存器有几种赋值语句，但都是通过C指令，因此都是outM
    // D寄存器写入：C指令指明了写入D寄存器
    And(a=instruction[15],b=instruction[4],out=loadD);
    Register(in=outMLoop,load=loadD,out=outD);

    // ALU
    // 需要解码出控制位：zx,nx,zy,ny,f,no
    ALU(x=outD,y=outA,zx=0,nx=0,zy=0,ny=0,f=0,no=0,out=outMLoop,out=outM,zr=outZR,ng=outNG);
}