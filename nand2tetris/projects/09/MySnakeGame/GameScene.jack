class GameScene{
    static int _unit;
    static int _maxLen;

    static int _vMaxX;
    static int _vMaxY;
    static int _vCellCount;
    
    field SnakeGame _game;
    field Array _snakeBody;
    field int _snakeLen;
    field int _vX;
    field int _vY;
    field int _moveDir;// 0,1,2,3   左，上，右，下

    field int _vNX;
    field int _vNY;

    field int _vFoodX;
    field int _vFoodY;

    field int _score;

    constructor GameScene new(SnakeGame game){
        // 静态变量
        let _unit = 8;
        let _maxLen = 10;
        let _vMaxX = 63;
        let _vMaxY = 31;
        let _vCellCount = 2048;
        //

        let _game=game;
        let _snakeBody = Array.new(_maxLen-1);
        let _score = 0;
        
        return this;
    }

    method void OnEnter(){
        var int i;
        let i = 0;
        while(i<(_maxLen-1)){
            let _snakeBody[i] = 0;
            let i=i+1;
        }

        let _vX = 0;
        let _vY = 0;
        let _moveDir = 2;
        let _snakeLen = 0;

        let _score = 0;
        // test
        /*let _snakeLen = 8;
        let _snakeBody[0] = 3;
        let _snakeBody[1] = 3;
        let _snakeBody[2] = 3;
        let _snakeBody[3] = 3;
        let _snakeBody[4] = 3;
        let _snakeBody[5] = 3;
        let _snakeBody[6] = 3;
        let _snakeBody[7] = 3;*/
        //
        do GenFood();
        do Screen.clearScreen();
        return;
    }

    method void OnExit(){
        return;
    }

    method void OnUpdate(){
        var char input;
        let input = Keyboard.keyPressed();
        if(input=140){// ESC
            do _game.GameOver();
            return;
        }

        if(input = 130){// 左
            if(~(_moveDir=2)){
                let _moveDir = 0;
            }
        }
        if(input = 131){// 上
            if(~(_moveDir=3)){
                let _moveDir = 1;
            }
        }
        if(input = 132){// 右
            if(~(_moveDir=0)){
                let _moveDir = 2;
            }
        }
        if(input = 133){// 下
            if(~(_moveDir=1)){
                let _moveDir = 3;
            }
        }

        if(Move()){
            // 绘制墙
            // 绘制蛇
            do DrawSnake(true);
            // 绘制食物
            do DrawFood();
        }
        else{
            do _game.GameOver();
        }

        return;
    }

    method bool Move(){
        var int i;

        if(_moveDir = 0){// 左
            let _vX = XDec(_vX);
        }
        if(_moveDir = 1){// 上
            let _vY = YDec(_vY);
        }
        if(_moveDir = 2){// 右
            let _vX = XInc(_vX);
        }
        if(_moveDir = 3){// 下
            let _vY = YInc(_vY);
        }

        // 更新蛇体方向
        if(_snakeLen > 0){
            let i = _snakeLen - 1;
            while(i>0){
                let _snakeBody[i] = _snakeBody[i-1];
                let i = i-1;
            }

            let _snakeBody[0] = _moveDir-2;
            if(_snakeBody[0]<0){
                let _snakeBody[0] = _snakeBody[0] + 4;
            }
        }

        if(CrashTest()){
            return false;
        }
        // 食物判断
        if((_vX=_vFoodX)&(_vY=_vFoodY)){
            let _score = _score + 1;
            if(_snakeLen<_maxLen){
                let _snakeLen = _snakeLen + 1;
                let _snakeBody[_snakeLen-1] = -1;// 设为-1会等到下一轮才绘制
            }
            
            do GenFood();
        }
        //
        return true;
    }

    method void IterateSnakeNode(int nodeDir){
        if(nodeDir = 0){// 左
            let _vNX = XDec(_vNX);
        }
        if(nodeDir = 1){// 上
            let _vNY = YDec(_vNY);
        }
        if(nodeDir = 2){// 右
            let _vNX = XInc(_vNX);
        }
        if(nodeDir = 3){// 下
            let _vNY = YInc(_vNY);
        }

        return;
    }

    method bool CrashTest(){
        var int i;
        var int ox;
        var int oy;
        let ox = _vNX;
        let oy = _vNY;

        let _vNX = _vX;
        let _vNY = _vY;
        let i = 0;
        while(i<_snakeLen){
            do IterateSnakeNode(_snakeBody[i]);
            if((_vNX=_vX) & (_vNY=_vY)){
                let _vNX = ox;
                let _vNY = oy;
                return true;
            }

            let i = i + 1;
        }

        let _vNX = ox;
        let _vNY = oy;
        return false;
    }

    method void GenFood(){
        var int i;
        var int r;
        let r = _vNX + _vNY;
        let i = r*r*r;
        let r = r - (i/6) + (i*r*r/120);
        let r = r * 5 + 2;
        // 乱搞的随机，将就用
        let _vFoodX = _vNX;
        let _vFoodY = _vNY;
        let i = 0;
        if(r<0){
            let r = -r;
        }
        if(r > 20){
            let r = 20;
        }

        while(i<r){
            let _vFoodX = XDec(_vFoodX);
            let _vFoodY = YInc(_vFoodY);
            let i = i+1;
        }

        return;
    }
    
    method int GetScore(){
        return _score;
    }

    method void Dispose(){
        do Memory.deAlloc(_snakeBody);
        do Memory.deAlloc(this);
        return;
    }

    method void DrawSnake(bool col){
        var int i;
        do GameScene.DrawPointRect(_vNX,_vNY,false);// 尾部清一格
        let i = 0;
        let _vNX = _vX;
        let _vNY = _vY;
        do GameScene.DrawPointRectHead(_vNX,_vNY,col);
        let i = 0;
        while(i<_snakeLen){
            do IterateSnakeNode(_snakeBody[i]);
            do GameScene.DrawPointRect(_vNX,_vNY,col);
            let i = i+1;
        }

        return;
    }

    method void DrawFood(){
        var int x;
        var int y;
        var int half;

        let half = _unit / 2;
        let x = (_vFoodX * _unit) + half - 1;
        let y = (_vFoodY * _unit) + half - 1;

        do Screen.setColor(true);
        do Screen.drawCircle(x,y,half-1);
        return;
    }

    method int XInc(int vX){
        if(vX = _vMaxX){
            let vX = 0;
        }
        else{
            let vX = vX + 1;
        }

        return vX;
    }

    method int XDec(int vX){
        if(vX = 0){
            let vX = _vMaxX;
        }
        else{
            let vX = vX - 1;
        }

        return vX;
    }

    method int YInc(int vY){
        if(vY = _vMaxY){
            let vY = 0;
        }
        else{
            let vY = vY + 1;
        }

        return vY;
    }

    method int YDec(int vY){
        if(vY = 0){
            let vY = _vMaxY;
        }
        else{
            let vY = vY - 1;
        }

        return vY;
    }

    function void DrawPointRectHead(int vX,int vY,bool col){
        var int x;
        var int y;
        let x = vX * _unit;
        let y = vY * _unit;

        do Screen.setColor(col);
        do Screen.drawRectangle(x,y,x+_unit-1,y+_unit-1);

        do Screen.setColor(~col);
        do Screen.drawRectangle(x+2,y+2,x+_unit-1-2,y+_unit-1-2);
        return;
    }

    function void DrawPointRect(int vX,int vY,bool col){
        var int x;
        var int y;
        let x = vX * _unit;
        let y = vY * _unit;

        do Screen.setColor(col);
        do Screen.drawRectangle(x,y,x+_unit-1,y+_unit-1);
        return;
    }
}